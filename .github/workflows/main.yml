name: Deploy to Ubuntu VPS

on:
 push:
    branches:
      - main # Trigger on push to main branch

jobs:
 deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Ensure target directory exists on VPS
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if [ ! -d "/dockerized/containers/dappmentors_backend" ]; then
              mkdir -p /dockerized/containers/dappmentors_backend
            fi

      - name: Copy Dockerfile to VPS
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./"
          target: "/dockerized/containers/dappmentors_backend"

      - name: Create .env file
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cat << EOF > /dockerized/containers/dappmentors_backend/.env
            ACCESS_TOKEN_EXPIRES_IN=${{ secrets.ACCESS_TOKEN_EXPIRES_IN }}
            ACCESS_TOKEN_SECRET_KEY=${{ secrets.ACCESS_TOKEN_SECRET_KEY }}
            ADMIN_DASHBOARD_URL=${{ secrets.ADMIN_DASHBOARD_URL }}
            CANCEL_URI=${{ secrets.CANCEL_URI }}
            FACEBOOK_CLIENT_ID=${{ secrets.FACEBOOK_CLIENT_ID }}
            FACEBOOK_CLIENT_SECRET=${{ secrets.FACEBOOK_CLIENT_SECRET }}
            GITHUB_CLIENT_ID=${{ secrets.GITHUB2_CLIENT_ID }}
            GITHUB_CLIENT_SECRET=${{ secrets.GITHUB2_CLIENT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            LOG_LEVEL=${{ secrets.LOG_LEVEL }}
            MAXIMUM_INSTRUCTOR_PROMO=${{ secrets.MAXIMUM_INSTRUCTOR_PROMO }}
            MONGO_URI=${{ secrets.MONGO_URI }}
            NODE_ENV=${{ secrets.NODE_ENV }}
            ORIGIN=${{ secrets.ORIGIN }}
            PORT=${{ secrets.PORT }}
            REFRESH_TOKEN_SECRET_KEY=${{ secrets.REFRESH_TOKEN_SECRET_KEY }}
            SIA_API_PASSWORD=${{ secrets.SIA_API_PASSWORD }}
            SIA_BASE_URL=${{ secrets.SIA_BASE_URL }}
            SIA_BUCKET=${{ secrets.SIA_BUCKET }}
            SOCIAL_REDIRECT_URL=${{ secrets.SOCIAL_REDIRECT_URL }}
            STRIPE_ENDPOINT_SECRET=${{ secrets.STRIPE_ENDPOINT_SECRET }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            SUCCESS_URI=${{ secrets.SUCCESS_URI }}
            TWITTER_CONSUMER_KEY=${{ secrets.TWITTER_CONSUMER_KEY }}
            TWITTER_CONSUMER_SECRET=${{ secrets.TWITTER_CONSUMER_SECRET }}
            EOF


      - name: Verify Dockerfile copied
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: ls -la /dockerized/containers/dappmentors_backend

      - name: Stop and remove Docker container if exists
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if docker ps -a --filter "name=dma_backend_instance" --format "{{.Names}}" | grep -q "^dma_backend_instance$"; then
              echo "Stopping and removing dma_backend_instance"
              docker stop dma_backend_instance || true
              docker rm dma_backend_instance || true
            fi

      - name: Create Docker volume if not exists
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if ! docker volume inspect dma_backend_volume > /dev/null 2>&1; then
              docker volume create dma_backend_volume
            fi

      - name: Build Docker image
        uses: appleboy/ssh-action@v0.1.3
        with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USERNAME }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            script: |
              cd /dockerized/containers/dappmentors_backend
              docker build -t dma_backend_image .
      
      - name: Remove untagged Docker images
        uses: appleboy/ssh-action@v0.1.3
        with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USERNAME }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            script: |
                docker rmi $(docker images -f "dangling=true" -q) || true
      
      - name: Run Docker container
        uses: appleboy/ssh-action@v0.1.3
        with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USERNAME }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            script: |
                docker run -d --restart unless-stopped --name dma_backend_instance \
                -p '${{ secrets.PORT }}':'${{ secrets.PORT }}' \
                -v dma_backend_volume:/data \
                dma_backend_image