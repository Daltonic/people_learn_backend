name: Backend Deploy to Ubuntu VPS

on:
  push:
    branches:
      - main # Trigger on push to main branch

jobs:
  prepare_environment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Ensure target directory exists on VPS
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if [ ! -d "/dockerized/containers/dappmentors_backend" ]; then
              mkdir -p /dockerized/containers/dappmentors_backend
            fi

      - name: Copy Github files to VPS
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: './'
          target: '/dockerized/containers/dappmentors_backend'

      - name: Create .env file
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cat << EOF > /dockerized/containers/dappmentors_backend/.env
            ACCESS_TOKEN_EXPIRES_IN=${{ secrets.ACCESS_TOKEN_EXPIRES_IN }}
            ACCESS_TOKEN_SECRET_KEY=${{ secrets.ACCESS_TOKEN_SECRET_KEY }}
            ADMIN_DASHBOARD_URL=${{ secrets.ADMIN_DASHBOARD_URL }}
            CANCEL_URI=${{ secrets.CANCEL_URI }}
            FACEBOOK_CLIENT_ID=${{ secrets.FACEBOOK_CLIENT_ID }}
            FACEBOOK_CLIENT_SECRET=${{ secrets.FACEBOOK_CLIENT_SECRET }}
            GITHUB_CLIENT_ID=${{ secrets.GITHUB2_CLIENT_ID }}
            GITHUB_CLIENT_SECRET=${{ secrets.GITHUB2_CLIENT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            LOG_LEVEL=${{ secrets.LOG_LEVEL }}
            MAXIMUM_INSTRUCTOR_PROMO=${{ secrets.MAXIMUM_INSTRUCTOR_PROMO }}
            MONGO_URI=${{ secrets.MONGO_URI }}
            NODE_ENV=${{ secrets.NODE_ENV }}
            ORIGIN=${{ secrets.ORIGIN }}
            PORT=${{ secrets.PORT }}
            REFRESH_TOKEN_SECRET_KEY=${{ secrets.REFRESH_TOKEN_SECRET_KEY }}
            SIA_API_PASSWORD=${{ secrets.SIA_API_PASSWORD }}
            SIA_BASE_URL=${{ secrets.SIA_BASE_URL }}
            SIA_BUCKET=${{ secrets.SIA_BUCKET }}
            SOCIAL_REDIRECT_URL=${{ secrets.SOCIAL_REDIRECT_URL }}
            STRIPE_ENDPOINT_SECRET=${{ secrets.STRIPE_ENDPOINT_SECRET }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            SUCCESS_URI=${{ secrets.SUCCESS_URI }}
            TWITTER_CONSUMER_KEY=${{ secrets.TWITTER_CONSUMER_KEY }}
            TWITTER_CONSUMER_SECRET=${{ secrets.TWITTER_CONSUMER_SECRET }}
            EOF

  build_image:
    needs: prepare_environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build Docker image with to replace the previous
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export DOCKER_BUILDKIT=1
            cd /dockerized/containers/dappmentors_backend
            docker build -t dma_backend_image .

  stop_and_start_container:
    needs: build_image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Stop and remove old Docker containers
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop dma_backend_instance || true
            docker rm dma_backend_instance || true

      - name: Run new Docker container
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker run -d --name dma_backend_instance -p ${{secrets.PORT}}:3000 -v dma_backend_volume:/data dma_backend_image

  clean_up_except_the_latest:
    needs: stop_and_start_container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Clean up previous Docker images except the latest
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Get the latest image ID
            latest_image_id=$(docker images 'dma_backend_image*' --format "{{.ID}}" | head -n1)
            # Remove all images except the latest one
            docker images 'dma_backend_image*' --format "{{.ID}}" | grep -v "$latest_image_id" | xargs --no-run-if-empty docker rmi

      - name: Remove untagged Docker images
        uses: appleboy/ssh-action@v0.1.3
        with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USERNAME }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            script: |
                docker rmi $(docker images -f "dangling=true" -q) || true
